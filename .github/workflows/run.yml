name: Terraform Pre-Merge Validation

on:
  pull_request:
    branches:
      - '**'  # Trigger for all branches
  workflow_dispatch:

permissions:
  id-token: write
  contents: read  # Required for checkout

jobs:
  terraform-checks:
    name: Validate Terraform & Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is fetched for `git diff`

      - name: Debug Git History
        run: |
          echo "HEAD is at: $(git rev-parse HEAD)"
          echo "Changes compared to base branch:"
          git diff --name-only ${{ github.event.pull_request.base.sha }}

      - name: Determine Changed Directory
        id: detect_changes
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }})
          echo "Changed files: $CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q 'IAC/ca-central-1'; then
            echo "dir=IAC/ca-central-1" >> $GITHUB_ENV
            echo "role=arn:aws:iam::891377304437:role/Github-access" >> $GITHUB_ENV
            echo "region=ca-central-1" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'IAC/dev'; then
            echo "dir=IAC/dev" >> $GITHUB_ENV
            echo "role=arn:aws:iam::257394485697:role/TerraformExecutionRole" >> $GITHUB_ENV
            echo "region=us-east-1" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'IAC/eu-west-2'; then
            echo "dir=IAC/eu-west-2" >> $GITHUB_ENV
            echo "role=arn:aws:iam::123456789012:role/EUWestRole" >> $GITHUB_ENV
            echo "region=eu-west-2" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'IAC/production'; then
            echo "dir=IAC/production" >> $GITHUB_ENV
            echo "role=arn:aws:iam::234567890123:role/ProductionRole" >> $GITHUB_ENV
            echo "region=us-east-1" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'IAC/staging'; then
            echo "dir=IAC/staging" >> $GITHUB_ENV
            echo "role=arn:aws:iam::345678901234:role/StagingRole" >> $GITHUB_ENV
            echo "region=us-east-1" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'IAC/us-east-1'; then
            echo "dir=IAC/us-east-1" >> $GITHUB_ENV
            echo "role=arn:aws:iam::456789012345:role/USEastRole" >> $GITHUB_ENV
            echo "region=us-east-1" >> $GITHUB_ENV
          else
            echo "No relevant Terraform changes detected. Skipping validation."
            exit 0
          fi

      - name: Set up AWS Credentials
        if: env.dir != ''
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.role }}
          aws-region: ${{ env.region }}

      - name: Verify AWS Identity
        if: env.dir != ''
        run: aws sts get-caller-identity

      - name: Set up Terraform
        if: env.dir != ''
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Debug Environment Variables
        if: env.dir != ''
        run: |
          echo "Working Directory: ${{ env.dir }}"
          echo "Role to Assume: ${{ env.role }}"
          echo "AWS Region: ${{ env.region }}"

      - name: Validate Terraform format
        if: env.dir != ''
        run: terraform fmt -check
        working-directory: ${{ env.dir }}

      - name: Initialize Terraform
        if: env.dir != ''
        run: terraform init
        working-directory: ${{ env.dir }}

      - name: Validate Terraform
        if: env.dir != ''
        run: terraform validate
        working-directory: ${{ env.dir }}

      # ðŸ”’ SECURITY SCANNING STEPS

      - name: Install Checkov
        if: env.dir != ''
        run: pip install checkov
      
      - name: Run Checkov Security Scan
        if: env.dir != ''
        run: checkov -d ${{ env.dir }}

      - name: Install tfsec
        if: env.dir != ''
        run: |
          curl -L -o tfsec https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/

      - name: Run tfsec Scan
        if: env.dir != ''
        run: tfsec ${{ env.dir }}

      - name: Install Trivy
        if: env.dir != ''
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          sudo mv trivy /usr/local/bin/
      
      - name: Run Trivy IaC Scan
        if: env.dir != ''
        run: trivy config --exit-code 1 --severity HIGH,CRITICAL ${{ env.dir }}

      - name: Install and Initialize tflint
        if: env.dir != ''
        run: |
          echo "Downloading tflint..."
          curl -L -o tflint.zip https://github.com/terraform-linters/tflint/releases/latest/download/tflint_linux_amd64.zip
          unzip tflint.zip -d /usr/local/bin
          chmod +x /usr/local/bin/tflint
          echo "tflint installed successfully."

          echo "Initializing tflint plugins..."
          tflint --init || { echo "tflint initialization failed"; exit 1; }

      - name: Run tflint
        if: env.dir != ''
        run: |
          echo "Running tflint with configuration file..."
          tflint --config=${{ github.workspace }}/IAC/.tflint.hcl --chdir=${{ env.dir }} || { echo "tflint execution failed"; exit 1; }
          echo "tflint ran successfully."

      - name: Generate Terraform Plan
        if: env.dir != ''
        run: terraform plan -out=tfplan
        working-directory: ${{ env.dir }}
