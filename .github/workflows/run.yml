name: Terraform Pre-Merge Validation

on:
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform-checks:
    name: Validate Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug Git History
        run: |
          echo "HEAD is at: $(git rev-parse HEAD)"
          echo "Changes compared to base branch:"
          git diff --name-only ${{ github.event.pull_request.base.sha }}

      - name: Determine Changed Directory
        id: detect_changes
        run: |
          # Detect the directory with changes
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }})
          echo "Changed files: $CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q 'Terraform/Audit'; then
            echo "working_directory=Terraform/Audit" >> $GITHUB_ENV
            echo "role=arn:aws:iam::401708891192:role/github-action-role" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'Terraform/Development'; then
            echo "working_directory=Terraform/Development" >> $GITHUB_ENV
            echo "role=arn:aws:iam::973334513903:role/github-action-role-dev" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'Terraform/EMR'; then
            echo "working_directory=Terraform/EMR" >> $GITHUB_ENV
            echo "role=arn:aws:iam::235265045598:role/github-action-role-emr" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'Terraform/Logs-Archive'; then
            echo "working_directory=Terraform/Logs-Archive" >> $GITHUB_ENV
            echo "role=arn:aws:iam::980766525411:role/github-action-role-logs-archive" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'Terraform/Production'; then
            echo "working_directory=Terraform/Production" >> $GITHUB_ENV
            echo "role=arn:aws:iam::427174714230:role/github-action-role-prod" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'Terraform/Reports'; then
            echo "working_directory=Terraform/Reports" >> $GITHUB_ENV
            echo "role=arn:aws:iam::831286133761:role/github-action-role-reports" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'Terraform/Shared-Services/service-account'; then
            echo "working_directory=Terraform/Shared-Services/service-account" >> $GITHUB_ENV
            echo "role=arn:aws:iam::338674575706:role/github-action-terraform-central-role" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -q 'Terraform/Staging'; then
            echo "working_directory=Terraform/Staging" >> $GITHUB_ENV
            echo "role=arn:aws:iam::237781716992:role/github-action-role-staging" >> $GITHUB_ENV
          else
            echo "No relevant changes detected."
            exit 1
          fi

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.role }}
          aws-region: ca-central-1

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Debug Environment Variables
        run: |
          echo "Working Directory: ${{ env.working_directory }}"
          echo "IAM Role: ${{ env.role }}"

      - name: Clean Working Directory
        run: |
          echo "Cleaning Terraform cache and temporary files..."
          rm -rf ${{ env.working_directory }}/.terraform
          rm -f ${{ env.working_directory }}/.terraform.lock.hcl

      - name: Initialize Terraform
        run: terraform init -reconfigure
        working-directory: ${{ env.working_directory }}

      - name: Validate Terraform
        run: terraform validate
        working-directory: ${{ env.working_directory }}

      - name: Generate Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ env.working_directory }}
